# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4DVNd7q9H8irv2KUoZDbgCGv2Q65KqS
"""

print("Root of Equations")
print("Find Root of Equation using Newton Raphson Method & Find Root of Equation using Bisection Method")
print("")

import numpy as np

def f(x):
  return x ** 6 + 2 * (x ** 2) - 3

# First Derivative
def df(x):
  return 6 * ( x ** 5) + 4 * x

def newton(guess, tolerate, iteration, max_iter):

  # Set condition maximal iteration
  if(iteration < max_iter + 1):
    x = guess - (f(guess) / df(guess))
    print(f"iter-{iteration}: {x}")
    iteration += 1

    if(abs(f(x)) < tolerate):
      print(f"\nthe root of equation: {x}")
      return
    newton(x, tolerate, iteration, max_iter)
  else:
    print(f"You have reached the maximal iteration")


guess = 4
tolerate = 0.01
max_iter = 15


newton(guess, tolerate, 1, max_iter)
print("")